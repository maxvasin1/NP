
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Открывает вложенный файл электронного письма.
//
// Параметры:
//  Ссылка  - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы,
//            СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы - ссылка на файл, который необходимо
//                                                                            открыть.
//
Процедура ОткрытьВложение(Ссылка, Форма) Экспорт

	ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(Ссылка, Форма.УникальныйИдентификатор);
	
	Если Форма.ЗапрещенныеРасширения.НайтиПоЗначению(ДанныеФайла.Расширение) <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура("ДанныеФайла", ДанныеФайла);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
		
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);

КонецПроцедуры

Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДополнительныеПараметры.ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив, содержащий структуры с информацией о контактах взаимодействия
// или участниках предмета взаимодействия.
// Параметры:
//  ТаблицаКонтактов - Документ.ТабличнаяЧасть - содержащая описания и ссылки на контакты взаимодействия
//                                               или участников предмета взаимодействия.
//
Функция ТаблицуКонтактовВМассив(ТаблицаКонтактов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
		Контакт = ?(ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"), Неопределено, СтрокаТаблицы.Контакт);
		Запись = Новый Структура(
		"Адрес, Представление, Контакт", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление, Контакт);
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполнить получение почты по всем доступным учетным записям.
// Параметры:
//  ЭлементСписок - ЭлементФормы - Элемент формы, который необходимо обновить, после получения писем.
//
Процедура ОтправитьЗагрузитьПочтуПользователя(ЭлементСписок = Неопределено) Экспорт

	ПолученоПисем = 0;
	ДоступноУчетныхЗаписей = 0;
	ЕстьОшибки = Ложь;
	
	Состояние(НСтр("ru = 'Идет отправка и получение электронной почты ...'"));
	ВзаимодействияВызовСервера.ОтправитьЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки);
	Состояние();
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загружено писем: %1'"), ПолученоПисем);
	Если ДоступноУчетныхЗаписей > 1 Тогда
		ТекстСообщения = ТекстСообщения + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(учетных записей: %1)'"), ДоступноУчетныхЗаписей);
	КонецЕсли;
	
	Если ЭлементСписок <> Неопределено Тогда
		ЭлементСписок.Обновить();
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстСообщения);
	
	Если ЕстьОшибки Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'При получении почты были ошибки. Подробности см. в журнале регистрации'"));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
