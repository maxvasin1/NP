#Область ОписаниеПеременных


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоТовары = Не ОбщегоНазначения.ПустойБуферОбмена("Товары");
	Элементы.ТоварыВставитьСтроки.Доступность = ЭтоТовары;
	Элементы.ТоварыВставитьСтрокиМеню.Доступность = ЭтоТовары;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСчетчикиСтрокТаблиц();
	ОбновитьНадписиИтого();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись__ДемоПоступлениеТоваров", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		ЭтоТовары = (Параметр.Источник = "Товары");
		Элементы.ТоварыВставитьСтроки.Доступность = ЭтоТовары;
		Элементы.ТоварыВставитьСтрокиМеню.Доступность = ЭтоТовары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
			
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
КонецПроцедуры

&НаСервере
Процедура ТипЦенПриИзмененииНаСервере()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		ДанныеДляОбменаСсервером = Новый Структура("Дата, Номенклатура, ТипЦен");
		ЗаполнитьЗначенияСвойств(ДанныеДляОбменаСсервером, ДокументОбъект);
		ЗаполнитьЗначенияСвойств(ДанныеДляОбменаСсервером, ТекСтрока);
		Цена = ТоварыЦенаНоменклатураПриИзмененииНаСервере(ДанныеДляОбменаСсервером);
		ТекСтрока.Цена = Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	ТипЦенПриИзмененииНаСервере();
	ОбновитьНадписиИтого();
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьСчетчикиСтрокТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписиИтого();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыЦенаНоменклатураПриИзмененииНаСервере(СтруктураПараметровДляОбмена)
	Если ЗначениеЗаполнено(СтруктураПараметровДляОбмена.Номенклатура) И ТипЗнч(СтруктураПараметровДляОбмена.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		Возврат ДобавленныеФункции.ПолучитьЦенуНоменклатуры(СтруктураПараметровДляОбмена.Дата, СтруктураПараметровДляОбмена.Номенклатура, СтруктураПараметровДляОбмена.ТипЦен);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИзменениеЦеныНоменклатурыНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЦеныНоменклатурыНаКлиенте(СтрокаТабличнойЧасти)
	
	ДанныеДляОбменаСсервером = Новый Структура("Дата, Номенклатура, ТипЦен");
	ЗаполнитьЗначенияСвойств(ДанныеДляОбменаСсервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеДляОбменаСсервером, СтрокаТабличнойЧасти);
	Цена = ТоварыЦенаНоменклатураПриИзмененииНаСервере(ДанныеДляОбменаСсервером);
	Если Цена <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = Цена;
	КонецЕсли;
	
	СтруктураПараметров = Неопределено;
	ДобавленныеФункцииКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров = Неопределено;
	ДобавленныеФункцииКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров = Неопределено;
	ДобавленныеФункцииКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	мПересчитыватьСкидкуДокумента = Ложь;
	ДобавленныеФункцииКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, мПересчитыватьСкидкуДокумента);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано товаров: %1'"), Элементы.Товары.ВыделенныеСтроки.Количество()));
	Оповестить("ДанныеСкопированыВБуферОбмена", Новый Структура("Источник", "Товары"), Объект.Ссылка);
	КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Количество = ВставитьСтрокиНаСервере();
	Если Количество > 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вставлено товаров: %1'"), Количество));
	КонецЕсли;
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСчетчикиСтрокТаблиц()
	УстановитьЗаголовокСтраницы(Элементы.СтраницаТовары, Объект.Товары, НСтр("ru = 'Товары'"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокСтраницы(ЭлементСтраница, РеквизитТабличнаяЧасть, ЗаголовокПоУмолчанию)
	ЗаголовокСтраницы = ЗаголовокПоУмолчанию;
	Если РеквизитТабличнаяЧасть.Количество() > 0 Тогда
		ЗаголовокСтраницы = ЗаголовокПоУмолчанию + " (" + РеквизитТабличнаяЧасть.Количество() + ")";
	КонецЕсли;
	ЭлементСтраница.Заголовок = ЗаголовокСтраницы;
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки, "Товары");

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере()
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ДанныеИзБуфераОбмена.Источник <> "Товары" Тогда
		Возврат 0;
	КонецЕсли;
		
	Таблица = ДанныеИзБуфераОбмена.Данные;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	Возврат Таблица.Количество();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНадписиИтого()
	Элементы.НадписьИтого.Заголовок = "Всего позиций - "+Объект.Товары.Количество()+", на сумму "+Объект.Товары.Итог("Сумма");
КонецПроцедуры



#КонецОбласти
