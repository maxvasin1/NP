#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает адресатов электронного письма.
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоИсходящее - документ, абонента которого необходимо получить.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая колонки "Контакт", "Представление" и "Адрес".
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий КАК ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	
	Возврат Взаимодействия.ПреобразоватьТаблицуКонтактовВМассив(ТаблицаКонтактов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов.

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Важность");
	Результат.Добавить("Ответственный");
	Результат.Добавить("ВзаимодействиеОснование");
	Результат.Добавить("Комментарий");
	Результат.Добавить("ПолучателиПисьма.Представление");
	Результат.Добавить("ПолучателиПисьма.Контакт");
	Результат.Добавить("ПолучателиКопий.Представление");
	Результат.Добавить("ПолучателиКопий.Контакт");
	Результат.Добавить("ПолучателиОтвета.Представление");
	Результат.Добавить("ПолучателиОтвета.Контакт");
	Результат.Добавить("ПолучателиСкрытыхКопий.Представление");
	Результат.Добавить("ПолучателиСкрытыхКопий.Контакт");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ВзаимодействияВызовСервера.ОбработкаПолученияДанныхВыбора(
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка, 
		"ЭлектронноеПисьмоИсходящее");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

// Регистрирует к обработке электронные письма у которых возможно заполнить ВзаимодействиеОснование.
//
Процедура ЗаполнитьВзаимодействияОснованияУПодчиненныхПисемКОбработке(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = Взаимодействия.ТекстЗапросаОтметкиКОбработкиЗаполненияПисемОснований("Документ.ЭлектронноеПисьмоИсходящее");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры 

// Выполняет дозаполнение реквизита ВзаимодействиеОснование у электронных писем.
//
Процедура ЗаполнитьВзаимодействияОснованияУПодчиненныхПисем(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ЭлектронноеПисьмоИсходящее";
	МетаданныеДокумента = Метаданные.Документы.ЭлектронноеПисьмоИсходящее;
	
	Взаимодействия.ЗаполнитьВзаимодействияОснованияУПодчиненныхПисем(Параметры, ПолноеИмяДокумента, МетаданныеДокумента);
	
КонецПроцедуры

// Регистрирует к обработке электронные письма у которых необходимо заполнить контакт у получателей письма.
//
Процедура ОпределитьНезаполненныеКонтактыВИсходящихЭлектронныхПисьмах(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт = НЕОПРЕДЕЛЕНО
		|	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.Дата >= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий КАК ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Контакт = НЕОПРЕДЕЛЕНО
		|	И ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка.Дата >= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт = НЕОПРЕДЕЛЕНО
		|	И ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка.Дата >= &Дата";
		
		Запрос.УстановитьПараметр("Дата", Дата(2016, 7, 1));
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Свернуть("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		ТаблицаДокументов.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Выполняет дозаполнение контакта у получателей электронных писем.
//
Процедура ЗаполнитьСписокКонтактовИсходящихЭлектронныхПисем(Параметры) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление КАК Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт КАК Контакт,
	|	""КОМУ"" КАК ВидОтправки
	|ПОМЕСТИТЬ СписокПочты
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт = НЕОПРЕДЕЛЕНО
	|	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Контакт,
	|	""СКРЫТЫЕКОПИИ"" КАК ВидОтправки
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий КАК ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Контакт = НЕОПРЕДЕЛЕНО
	|	И ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт,
	|	""КОПИИ"" КАК ВидОтправки
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт = НЕОПРЕДЕЛЕНО
	|	И ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка = &Ссылка
	|;
	|";
	
	ШаблонЗапроса = " ВЫБРАТЬ
	|	МАКСИМУМ(%1.Ссылка) КАК Ссылка,
	|	%1.Представление КАК Представление,
	|	СписокПочты.ВидОтправки
	|ИЗ
	|	СписокПочты КАК СписокПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%2.КонтактнаяИнформация КАК %1
	|		ПО (СписокПочты.Адрес = %1.Представление)
	|ГДЕ
	|	%1.Тип = &Тип
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокПочты.ВидОтправки,
	|	%1.Представление
	|ИМЕЮЩИЕ
	|    КОЛИЧЕСТВО(%1.Ссылка) = 1";
	
	ОБЪЕДИНИТЬВСЕ = "";
	Для каждого ТипКонтактВзаимодействия Из Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы() Цикл
		КонтактВзаимодействия = Метаданные.НайтиПоТипу(ТипКонтактВзаимодействия);
		Если СтрНачинаетсяС(КонтактВзаимодействия.ПолноеИмя(), "Справочник") Тогда
			Если КонтактВзаимодействия.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + ОБЪЕДИНИТЬВСЕ + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
				КонтактВзаимодействия.Имя + "КонтактнаяИнформация", КонтактВзаимодействия.Имя);
				ОБЪЕДИНИТЬВСЕ = " ОБЪЕДИНИТЬ ВСЕ ";
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПолноеИмяДокумента = "Документ.ЭлектронноеПисьмоИсходящее";
	МетаданныеДокумента = Метаданные.Документы.ЭлектронноеПисьмоИсходящее;
	
	ЭлектронноеПисьмоИсходящееСсылка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ЭлектронноеПисьмоИсходящееСсылка.Следующий() Цикл
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Ссылка", ЭлектронноеПисьмоИсходящееСсылка.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = ЭлектронноеПисьмоИсходящееСсылка.Ссылка.ПолучитьОбъект();
				Почта = РезультатЗапроса.Выбрать();
				Пока Почта.Следующий() Цикл
					Если Почта.ВидОтправки = "КОПИИ" Тогда
						ИмяТаблицы = "ПолучателиКопий";
					ИначеЕсли Почта.ВидОтправки = "СКРЫТЫЕКОПИИ" Тогда
						ИмяТаблицы = "ПолучателиСкрытыхКопий";
					Иначе
						ИмяТаблицы = "ПолучателиПисьма";
					КонецЕсли;
					СтрокаТаблицы = ДокументОбъект[ИмяТаблицы].Найти(Почта.Представление, "Адрес");
					Если СтрокаТаблицы <> Неопределено Тогда
						СтрокаТаблицы.Контакт = Почта.Ссылка;
						Если ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
							СтрокаТаблицы.Представление = Строка(Почта.Ссылка);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Взаимодействия.ПриЗаписиДокумента(ДокументОбъект);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				ОбъектовОбработано = ОбъектовОбработано + 1;
				ЗафиксироватьТранзакцию();
			Исключение
				//	Если не удалось обработать какой-либо документ электронное исходящие письмо, повторяем попытку снова.
				ОтменитьТранзакцию();
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать электронное исходящие письмо: %1 по причине: %2'"),
				ЭлектронноеПисьмоИсходящееСсылка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ЭлектронноеПисьмоИсходящее, ЭлектронноеПисьмоИсходящееСсылка.Ссылка, ТекстСообщения);
			КонецПопытки;
		Иначе
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлектронноеПисьмоИсходящееСсылка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяДокумента);
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре ЗаполнитьСписокКонтактовИсходящихЭлектронныхПисем не удалось обработать некоторые документы электронного исходящего письма (пропущены): %1'"),
		ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		МетаданныеДокумента,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура ЗаполнитьСписокКонтактовИсходящихЭлектронныхПисем обработала очередную порцию документов электронных исходящих писем: %1'"),
		ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
