#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//Абонементы
	ТаблицаАбонементов = СформироватьТаблицуАбонементов();
	Если ТаблицаАбонементов.Количество()>0 Тогда
		ДобавленныеФункции.СформироватьДвиженияПоРегистру(Ссылка,ТаблицаАбонементов, Отказ, "АбонементыКонтрагентов",,"Расход",Движения.АбонементыКонтрагентов);
	КонецЕсли;
	
	//Посещения
	ТаблицаПосещений = СформироватьТаблицуПосещений();
	Если ТаблицаПосещений.Количество()>0 Тогда
		СформироватьДвиженияПоРегистру(ТаблицаПосещений, Отказ, "Посещения", , "Обороты");
	КонецЕсли;
	
	//Товары
	ДвиженияПоРегистрам(Отказ);
	
	//Взаиморасчеты
	ТаблицаВзаиморасчетов = СоздатьТаблицуДолгаПоДокументам();
	СформироватьДвиженияПоРегистру(ТаблицаВзаиморасчетов, Отказ, "Взаиморасчеты", Истина);
	
	ТаблицаОплат		  = СоздатьТаблицуОплатПоДокументам();
	СформироватьДвиженияПоРегистру(ТаблицаОплат, Отказ, "Взаиморасчеты", , "Расход");
	
	//Денежные средства
	ТаблицаДС = СоздатьТаблицуДенежныхСредств();
	Если ТаблицаДС.Количество()>0 Тогда
		СформироватьДвиженияПоРегистру(ТаблицаДС, Отказ, "ДенежныеСредства", , "Приход");
	КонецЕсли;
	
	//Продажи
	ТаблицаТоваров = СоздатьТаблицуПродажТоваров();
	Если ТаблицаТоваров.Количество()>0 Тогда
		СформироватьДвиженияПоРегистру(ТаблицаТоваров, Отказ, "Продажи", , "Обороты");
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьТаблицуАбонементов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПосещениеПосещения.Контрагент,
	               |	ПосещениеПосещения.Абонемент,
	               |	КОЛИЧЕСТВО(ПосещениеПосещения.Абонемент) КАК ЧислоПосещений
	               |ПОМЕСТИТЬ ДляРаспределения
	               |ИЗ
	               |	Документ.Посещение.Посещения КАК ПосещениеПосещения
	               |ГДЕ
	               |	ПосещениеПосещения.Абонемент <> ЗНАЧЕНИЕ(Справочник.АбонементыКонтрагента.Пустаяссылка)
	               |	И ПосещениеПосещения.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПосещениеПосещения.Контрагент,
	               |	ПосещениеПосещения.Абонемент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АбонементыКонтрагентовОстатки.Контрагент КАК Контрагент,
	               |	АбонементыКонтрагентовОстатки.Абонемент КАК Абонемент,
	               |	СУММА(АбонементыКонтрагентовОстатки.ЧислоПосещенийОстаток) КАК ЧислоПосещенийОстаток,
	               |	СУММА(АбонементыКонтрагентовОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	               |ПОМЕСТИТЬ Данные
	               |ИЗ
	               |	РегистрНакопления.АбонементыКонтрагентов.Остатки(&Дата) КАК АбонементыКонтрагентовОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АбонементыКонтрагентовОстатки.Контрагент,
	               |	АбонементыКонтрагентовОстатки.Абонемент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДляРаспределения.Контрагент КАК Контрагент,
	               |	ДляРаспределения.Абонемент КАК Абонемент,
	               |	ВЫБОР
	               |		КОГДА ДляРаспределения.ЧислоПосещений = Данные.ЧислоПосещенийОстаток
	               |			ТОГДА Данные.СтоимостьОстаток
	               |		ИНАЧЕ Данные.СтоимостьОстаток * ДляРаспределения.ЧислоПосещений / Данные.ЧислоПосещенийОстаток
	               |	КОНЕЦ КАК Стоимость,
	               |	ДляРаспределения.ЧислоПосещений КАК ЧислоПосещений
	               |ИЗ
	               |	ДляРаспределения КАК ДляРаспределения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Данные КАК Данные
	               |		ПО ДляРаспределения.Контрагент = Данные.Контрагент
	               |			И ДляРаспределения.Абонемент = Данные.Абонемент";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ТабАбонементов = Результат.Выгрузить();
	Иначе 	
		ТабАбонементов = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат ТабАбонементов;
	 
КонецФункции

Функция СформироватьТаблицуПосещений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПосещениеПосещения.Ссылка.Склад КАК Клуб,
	               |	ПосещениеПосещения.Контрагент,
	               |	КОЛИЧЕСТВО(ПосещениеПосещения.Контрагент) КАК КоличествоПосещений,
	               |	ПосещениеПосещения.Абонемент,
	               |	ПосещениеПосещения.ВидПосещения
	               |ИЗ
	               |	Документ.Посещение.Посещения КАК ПосещениеПосещения
	               |ГДЕ
	               |	ПосещениеПосещения.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПосещениеПосещения.Контрагент,
	               |	ПосещениеПосещения.Ссылка.Склад,
	               |	ПосещениеПосещения.Абонемент,
	               |	ПосещениеПосещения.ВидПосещения";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ТаблицаПосещений = Результат.Выгрузить();
	Иначе 
		ТаблицаПосещений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат ТаблицаПосещений;
	 
КонецФункции

Процедура ДвиженияПоРегистрам(Отказ) Экспорт
	
	СтруктураДокумента = Новый Структура("Склад,ВидОперации");
	ЗаполнитьЗначенияСвойств(СтруктураДокумента,ЭтотОбъект);
	СтруктураДокумента.ВидОперации = "Реализация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПосещениеПосещения.ВидПосещения КАК ВидПосещения,
	               |	ВидыПосещенийСостав.Номенклатура КАК Номенклатура,
	               |	СУММА(ВидыПосещенийСостав.КоличествоПродукта) КАК Количество
	               |ИЗ
	               |	Документ.Посещение.Посещения КАК ПосещениеПосещения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПосещений.Состав КАК ВидыПосещенийСостав
	               |		ПО ПосещениеПосещения.ВидПосещения = ВидыПосещенийСостав.Ссылка
	               |ГДЕ
	               |	ПосещениеПосещения.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПосещениеПосещения.ВидПосещения,
	               |	ВидыПосещенийСостав.Номенклатура
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВидыПосещенийСостав.КоличествоПродукта) > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.БелокПорционный),
	               |	СУММА(ПосещениеПосещения.Белок)
	               |ИЗ
	               |	Документ.Посещение.Посещения КАК ПосещениеПосещения
	               |ГДЕ
	               |	ПосещениеПосещения.Ссылка = &Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ПосещениеПосещения.Белок) > 0";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПоТоварам = Результат.Выгрузить();
	ТаблицаПоТоварам.Свернуть("Номенклатура","Количество");
	СтруктураДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	Если ТаблицаПоТоварам.Количество()>0 Тогда
		ДобавленныеФункции.ВыполнитьДвиженияПоПартиямТоваров(Ссылка,СтруктураДокумента, Отказ, Движения.ТоварыНаСкладах);
	КонецЕсли;
КонецПроцедуры

Функция СоздатьТаблицуДолгаПоДокументам()
	
	ТаблицаВзаиморасчетов = Посещения.Выгрузить();
	ТаблицаВзаиморасчетов.Свернуть("Контрагент","СтоимостьИтог");
	
	ТаблицаДвижений = Движения.Взаиморасчеты.Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл
		НовСтр = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ТекСтрока);
		НовСтр.СуммаВзаиморасчетов = ТекСтрока.СтоимостьИтог;
		Если НовСтр.СуммаВзаиморасчетов = 0 Тогда
			ТаблицаДвижений.Удалить(НовСтр);
		КонецЕсли;
	КонецЦикла;
	
	НовТаблицаДвижений = ДобавленныеФункции.РаспределитьОплатуПоРасчетнымДокументам(Ссылка, ТаблицаДвижений, Ложь);
	
	Возврат НовТаблицаДвижений;
	
КонецФункции

Функция СоздатьТаблицуОплатПоДокументам()
	
	ТаблицаВзаиморасчетов = Посещения.Выгрузить();
	ТаблицаВзаиморасчетов.Свернуть("Контрагент","Оплачено");
	
	ТаблицаДвижений = Движения.Взаиморасчеты.Выгрузить();
	ТаблицаДвижений.Очистить();
	Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл
		НовСтр = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ТекСтрока);
		НовСтр.СуммаВзаиморасчетов = ТекСтрока.Оплачено;
		Если НовСтр.СуммаВзаиморасчетов = 0 Тогда
			ТаблицаДвижений.Удалить(НовСтр);
		КонецЕсли;
	КонецЦикла;
	
	НовТаблицаДвижений = ДобавленныеФункции.РаспределитьОплатуПоРасчетнымДокументам(Ссылка, ТаблицаДвижений, Истина);
	
	Возврат НовТаблицаДвижений;
	
КонецФункции

Процедура СформироватьДвиженияПоРегистру(Таблица, Отказ, ИмяРегистра, ПромежуточноЗаписать=Ложь, ВидДвижения = "Приход")

	// ПО РЕГИСТРУ Взаиморасчеты.
	
	НаборДвижений = Движения[ИмяРегистра];
	НаборДвижений.Записывать = Истина;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначенияНП.ЗагрузитьВТаблицуЗначений(Таблица, ТаблицаДвижений);
	
	// Недостающие поля.
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		
		Если ВидДвижения = "Приход" Тогда
			НаборДвижений.ВыполнитьПриход();
		ИначеЕсли ВидДвижения = "Обороты" Тогда
			НаборДвижений.ВыполнитьДвижения();
		Иначе
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПромежуточноЗаписать ТОгда
		НаборДвижений.Записать();
	КонецЕсли;
КонецПроцедуры

Функция СоздатьТаблицуДенежныхСредств()
	
	ТаблицаДвижений = Движения.ДенежныеСредства.Выгрузить();
	ТаблицаДвижений.Очистить();
	НовСтр = ТаблицаДвижений.Добавить();
	
	НовСтр.Сумма = Посещения.Итог("Оплачено");
	Если НовСтр.Сумма = 0 Тогда
		ТаблицаДвижений.Удалить(НовСтр);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция СоздатьТаблицуПродажТоваров()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.БелокПорционный) КАК Номенклатура,
	               |	СУММА(ПосещениеПосещения.Белок) КАК Количество,
	               |	СУММА(ПосещениеПосещения.СтоимостьБелка) КАК Сумма,
	               |	ПосещениеПосещения.Контрагент
	               |ИЗ
	               |	Документ.Посещение.Посещения КАК ПосещениеПосещения
	               |ГДЕ
	               |	ПосещениеПосещения.Ссылка = &Ссылка
	               |	И ПосещениеПосещения.Белок > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПосещениеПосещения.Контрагент";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Отказ=Истина;
	КонецЕсли;
	ТабТоваров = Результат.Выгрузить();
	Возврат ТабТоваров;
КонецФункции

#КонецОбласти
